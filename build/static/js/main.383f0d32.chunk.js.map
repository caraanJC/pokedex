{"version":3,"sources":["state/action-types/index.ts","state/action-creators/index.ts","state/reducers/pokedex.ts","state/reducers/pokemonTypes.ts","state/reducers/selectedType.ts","state/reducers/searchWord.ts","state/reducers/selectedPokemon.ts","state/reducers/index.ts","state/store.ts","components/PokemonData.tsx","components/PokemonMoreInfo.tsx","components/PokemonFilter.tsx","components/PokeCard.tsx","components/PokeList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","setPokemonTypes","pokemonTypes","dispatch","type","SET_POKEMON_TYPES","payload","setSelectedType","selectedType","SET_SELECTED_TYPE","setSearchWord","searchWord","SET_SEARCH_WORD","setSelectedPokemon","pokemon","SET_SELECTED_POKEMON","addPokemonToPokedex","ADD_POKEMON_TO_POKEDEX","resetPokedex","RESET_POKEDEX","initialState","pokemons","reducer","state","action","reducers","combineReducers","pokedex","selectedPokemon","persistConfig","key","storage","localforage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","PokemonData","useSelector","useDispatch","bindActionCreators","actionCreators","className","name","ntnlnum","src","img","alt","types","map","pokeType","onClick","pokeTypeClickHandler","to","Description","PokemonMoreInfo","PokemonFilter","buttonTypeClickHandler","placeholder","onChange","e","target","value","pokemonType","PokeCard","props","PokeList","filter","includes","toLowerCase","toLocaleLowerCase","App","useEffect","pokeTypes","forEach","push","index","self","indexOf","sort","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"osRAAYA,E,+EAAAA,K,6CAAAA,E,6BAAAA,E,oCAAAA,E,oCAAAA,E,gCAAAA,E,2CAAAA,M,KCUZ,IAAMC,EAAkB,SAACC,GACvB,OAAO,SAACC,GACNA,EAAS,CACPC,KAAMJ,EAAWK,kBACjBC,QAASJ,MAKTK,EAAkB,SAACC,GACvB,OAAO,SAACL,GACNA,EAAS,CACPC,KAAMJ,EAAWS,kBACjBH,QAASE,MAKTE,EAAgB,SAACC,GACrB,OAAO,SAACR,GACNA,EAAS,CACPC,KAAMJ,EAAWY,gBACjBN,QAASK,MAuBTE,EAAqB,SAACC,GAC1B,OAAO,SAACX,GACNA,EAAS,CACPC,KAAMJ,EAAWe,qBACjBT,QAASQ,MAKTE,EAAsB,SAACF,GAC3B,OAAO,SAACX,GACNA,EAAS,CACPC,KAAMJ,EAAWiB,uBACjBX,QAASQ,MAKTI,EAAe,WACnB,OAAO,SAACf,GACNA,EAAS,CACPC,KAAMJ,EAAWmB,kBCvEjBC,E,MAAuBC,SAadC,EAXC,WAAkD,IAAjDC,EAAgD,uDAAxCH,EAAcI,EAA0B,uCAC/D,OAAQA,EAAOpB,MACb,KAAKJ,EAAWiB,uBACd,MAAM,GAAN,mBAAWM,GAAX,CAAkBC,EAAOlB,UAC3B,KAAKN,EAAWmB,cACd,MAAO,GACT,QACE,OAAOI,ICFED,EATC,WAAuD,IAAtDC,EAAqD,uDAAnC,GAAIC,EAA+B,uCACpE,OAAQA,EAAOpB,OACRJ,EAAWK,kBACPmB,EAAOlB,QAEPiB,GCIED,EATC,WAAgD,IAA/CC,EAA8C,uDAAtC,MAAOC,EAA+B,uCAC7D,OAAQA,EAAOpB,OACRJ,EAAWS,kBACPe,EAAOlB,QAEPiB,GCIED,EATC,WAA2C,IAA1CC,EAAyC,uDAAjC,GAAIC,EAA6B,uCACxD,OAAQA,EAAOpB,OACRJ,EAAWY,gBACPY,EAAOlB,QAEPiB,GCIED,EATC,WAAgD,IAA/CC,EAA8C,uDAAtC,GAAIC,EAAkC,uCAC7D,OAAQA,EAAOpB,OACRJ,EAAWe,qBACPS,EAAOlB,QAEPiB,GCOEE,EAREC,YAAgB,CAC/BC,UACAzB,eACAM,eACAG,aACAiB,oB,gCCHIC,EAAgB,CACpBC,IAAK,OACLC,Q,OAASC,GAGLC,EAAmBC,YAAeL,EAAeJ,GAEjDU,EAAQC,YAAYH,EAAkB,GAAII,YAAgBC,MAE1DC,EAAYC,YAAaL,G,oCCoChBM,EA/CK,WAClB,IAAMb,EAAuBc,aAC3B,SAACnB,GAAD,OAAkBA,EAAMK,mBAGpBzB,EAAWwC,cACTpC,EAAoBqC,YAAmBC,EAAgB1C,GAAvDI,gBAMR,OACE,sBAAKuC,UAAU,cAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,mBAAGA,UAAU,oBAAb,SAAkClB,EAAgBmB,OAClD,mBAAGD,UAAU,kBAAb,SAAgClB,EAAgBoB,aAGlD,qBACEF,UAAU,mBACVG,IAAKrB,EAAgBsB,IACrBC,IAAKvB,EAAgBsB,MAEvB,sBAAKJ,UAAU,uBAAf,UACE,mBAAGA,UAAU,2BAAb,mBACA,qBAAKA,UAAU,qBAAf,SACGlB,EAAgBwB,MAAMC,KAAI,SAACC,GAAD,OACzB,wBAEER,UAAS,sBAAiBQ,GAC1BC,QAAS,kBAvBQ,SAACD,GAC5B/C,EAAgB+C,GAsBSE,CAAqBF,IAHtC,SAKE,cAAC,IAAD,CAAMG,GAAG,IAAIX,UAAU,oBAAvB,SACGQ,KALEA,QAUX,mBAAGR,UAAU,2BAAb,SACGlB,EAAgB8B,qBC/BZC,EAXS,WACtB,OACE,sBAAKb,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMW,GAAG,IAAIX,UAAU,wBAAvB,4BAGA,cAAC,EAAD,QC4DSc,G,MAjEO,WACpB,IAAMzD,EAAWwC,cACjB,EAA2CC,YACzCC,EACA1C,GAFMO,EAAR,EAAQA,cAAeH,EAAvB,EAAuBA,gBAKjBC,EAAekC,aAAY,SAACnB,GAAD,OAAkBA,EAAMf,gBAEnDN,EAAewC,aAAY,SAACnB,GAAD,OAAkBA,EAAMrB,gBACnDS,EAAa+B,aAAY,SAACnB,GAAD,OAAkBA,EAAMZ,cAEjDkD,EAAyB,SAACP,GAC9B/C,EAAgB+C,IAUlB,OACE,sBAAKR,UAAU,gBAAf,UACE,uBACEgB,YAAY,SACZ1D,KAAK,OACL2D,SARqB,SAACC,GAC1BtD,EAAcsD,EAAEC,OAAOC,QAQnBA,MAAOvD,EACPmC,UAAU,0BAEZ,wBACEA,UAAU,wBACVoB,MAAO1D,EACPuD,SAnBsB,SAACC,GAC3BzD,EAAgByD,EAAEC,OAAOC,QAevB,SAKG,sBAAIhE,GAAJ,CAAkB,QAAOmD,KAAI,SAACc,GAAD,OAC5B,wBAA0BD,MAAOC,EAAjC,SACGA,GADUA,QAMjB,sBAAKrB,UAAU,yBAAf,UACG5C,EAAamD,KAAI,SAACc,GAAD,OAChB,wBACEZ,QAAS,kBAAMM,EAAuBM,IACtCrB,UAAS,4CAAuCqB,GAFlD,SAKGA,GAFIA,MAKT,wBACEZ,QAAS,kBAAMM,EAAuB,QACtCf,UAAU,wCAFZ,yBCVOsB,G,MAjCoB,SAACC,GAClC,IAAMlE,EAAWwC,cACT9B,EAAuB+B,YAAmBC,EAAgB1C,GAA1DU,mBAMR,OACE,qBAAIiC,UAAU,WAAd,UACE,mBAAGA,UAAU,iBAAb,SAA+BuB,EAAMvD,QAAQiC,OAC7C,cAAC,IAAD,CACEU,GAAE,aACFF,QATuB,WAC3B1C,EAAmBwD,EAAMvD,UASrBgC,UAAU,iBAHZ,SAKE,qBACEA,UAAU,gBACVG,IAAKoB,EAAMvD,QAAQoC,IACnBC,IAAKkB,EAAMvD,QAAQiC,SAGvB,qBAAKD,UAAU,kBAAf,SACGuB,EAAMvD,QAAQsC,MAAMC,KAAI,SAACC,GAAD,OACvB,wBAAuBR,UAAS,sBAAiBQ,GAAjD,SACGA,GADUA,aCZRgB,G,MAtBY,WACzB,IAAM3C,EAAUe,aAAY,SAACnB,GAAD,OAAkBA,EAAMI,WAC9CnB,EAAekC,aAAY,SAACnB,GAAD,OAAkBA,EAAMf,gBACnDG,EAAa+B,aAAY,SAACnB,GAAD,OAAkBA,EAAMZ,cAEvD,OACE,oBAAImC,UAAU,WAAd,SACG,YAAInB,GACF4C,QACC,SAACzD,GAAD,MACmB,QAAjBN,GAA0BM,EAAQsC,MAAMoB,SAAShE,MAEpD+D,QAAO,SAACzD,GAAD,OACNA,EAAQiC,KAAK0B,cAAcD,SAAS7D,EAAW+D,wBAEhDrB,KAAI,SAACvC,GAAD,OACH,cAAC,EAAD,CAAUA,QAASA,GAAcA,EAAQkC,gBCyBpC2B,EArCH,WACV,IAAMhD,EAAUe,aAAY,SAACnB,GAAD,OAAkBA,EAAMI,WAC9CnB,EAAekC,aAAY,SAACnB,GAAD,OAAkBA,EAAMf,gBAEnDL,EAAWwC,cAET1C,EAAoB2C,YAAmBC,EAAgB1C,GAAvDF,gBAgBR,OAdA2E,qBAAU,WACR,IAGIC,EAAsB,GAC1B,YAAIlD,GAAS0B,KAAI,SAACvC,GAAD,OACfA,EAAQsC,MAAM0B,SAAQ,SAAC1E,GAAD,OAAUyE,EAAUE,KAAK3E,UAEjDyE,EAAYA,EAAUN,QAPL,SAACL,EAAec,EAAeC,GAC9C,OAAOA,EAAKC,QAAQhB,KAAWc,MAOvBG,OAEVlF,EAAgB4E,MAIhB,qBAAK/B,UAAS,cAAStC,GAAvB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAO4E,OAAK,EAACC,KAAK,IAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,YC3BKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9D,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaI,UAAWA,EAAxB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,YAKR2D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.383f0d32.chunk.js","sourcesContent":["export enum ActionType {\r\n  ADD_POKEMON_TO_POKEDEX = 'addPokemonToPokedex',\r\n  RESET_POKEDEX = 'resetPokedex',\r\n\r\n  SET_POKEMON_TYPES = 'setPokemonTypes',\r\n\r\n  SET_SELECTED_TYPE = 'setSelectedType',\r\n  SET_SEARCH_WORD = 'setSearchWord',\r\n  SET_SELECTED_POKEMON = 'setSelectedPokemon',\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { ActionType } from '../action-types';\r\nimport {\r\n  ActionPokedex,\r\n  ActionPokemonTypes,\r\n  ActionSearchWord,\r\n  ActionSelectedPokemon,\r\n  ActionSelectedType,\r\n} from '../actions';\r\n\r\nconst setPokemonTypes = (pokemonTypes: string[]) => {\r\n  return (dispatch: Dispatch<ActionPokemonTypes>) => {\r\n    dispatch({\r\n      type: ActionType.SET_POKEMON_TYPES,\r\n      payload: pokemonTypes,\r\n    });\r\n  };\r\n};\r\n\r\nconst setSelectedType = (selectedType: string) => {\r\n  return (dispatch: Dispatch<ActionSelectedType>) => {\r\n    dispatch({\r\n      type: ActionType.SET_SELECTED_TYPE,\r\n      payload: selectedType,\r\n    });\r\n  };\r\n};\r\n\r\nconst setSearchWord = (searchWord: string) => {\r\n  return (dispatch: Dispatch<ActionSearchWord>) => {\r\n    dispatch({\r\n      type: ActionType.SET_SEARCH_WORD,\r\n      payload: searchWord,\r\n    });\r\n  };\r\n};\r\n\r\ninterface IParams {\r\n  pokedex: {\r\n    name: string;\r\n    ntnlnum: string;\r\n    img: string;\r\n    types: string[];\r\n    Description: string;\r\n  }[];\r\n  pokemon: {\r\n    name: string;\r\n    ntnlnum: string;\r\n    img: string;\r\n    types: string[];\r\n    Description: string;\r\n  };\r\n  urls: { name: string; url: string }[];\r\n}\r\n\r\nconst setSelectedPokemon = (pokemon: IParams['pokemon']) => {\r\n  return (dispatch: Dispatch<ActionSelectedPokemon>) => {\r\n    dispatch({\r\n      type: ActionType.SET_SELECTED_POKEMON,\r\n      payload: pokemon,\r\n    });\r\n  };\r\n};\r\n\r\nconst addPokemonToPokedex = (pokemon: IParams['pokemon']) => {\r\n  return (dispatch: Dispatch<ActionPokedex>) => {\r\n    dispatch({\r\n      type: ActionType.ADD_POKEMON_TO_POKEDEX,\r\n      payload: pokemon,\r\n    });\r\n  };\r\n};\r\n\r\nconst resetPokedex = () => {\r\n  return (dispatch: Dispatch<ActionPokedex>) => {\r\n    dispatch({\r\n      type: ActionType.RESET_POKEDEX,\r\n    });\r\n  };\r\n};\r\n\r\nexport {\r\n  setPokemonTypes,\r\n  setSelectedType,\r\n  setSearchWord,\r\n  setSelectedPokemon,\r\n  addPokemonToPokedex,\r\n  resetPokedex,\r\n};\r\n","import { ActionType } from '../action-types';\r\nimport { ActionPokedex } from '../actions';\r\n\r\nimport pokedex from '../../assets/pokemon.json';\r\n\r\nconst initialState = pokedex.pokemons;\r\n\r\nconst reducer = (state = initialState, action: ActionPokedex) => {\r\n  switch (action.type) {\r\n    case ActionType.ADD_POKEMON_TO_POKEDEX:\r\n      return [...state, action.payload];\r\n    case ActionType.RESET_POKEDEX:\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ActionType } from '../action-types';\r\nimport { ActionPokemonTypes } from '../actions';\r\n\r\nconst reducer = (state: string[] = [], action: ActionPokemonTypes) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_POKEMON_TYPES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ActionType } from '../action-types';\r\nimport { ActionSelectedType } from '../actions';\r\n\r\nconst reducer = (state = 'All', action: ActionSelectedType) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_SELECTED_TYPE:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ActionType } from '../action-types';\r\nimport { ActionSearchWord } from '../actions';\r\n\r\nconst reducer = (state = '', action: ActionSearchWord) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_SEARCH_WORD:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { ActionType } from '../action-types';\r\nimport { ActionSelectedPokemon } from '../actions';\r\n\r\nconst reducer = (state = {}, action: ActionSelectedPokemon) => {\r\n  switch (action.type) {\r\n    case ActionType.SET_SELECTED_POKEMON:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport pokedex from './pokedex';\r\nimport pokemonTypes from './pokemonTypes';\r\nimport selectedType from './selectedType';\r\nimport searchWord from './searchWord';\r\nimport selectedPokemon from './selectedPokemon';\r\n\r\nconst reducers = combineReducers({\r\n  pokedex,\r\n  pokemonTypes,\r\n  selectedType,\r\n  searchWord,\r\n  selectedPokemon,\r\n});\r\n\r\nexport default reducers;\r\nexport type State = ReturnType<typeof reducers>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport reducers from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nimport persistStore from 'redux-persist/es/persistStore';\r\n\r\nimport localforage from 'localforage';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: localforage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = createStore(persistedReducer, {}, applyMiddleware(thunk));\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators, State } from '../state';\r\n\r\nimport '../styles/PokemonData.css';\r\n\r\nconst PokemonData = () => {\r\n  const selectedPokemon: any = useSelector(\r\n    (state: State) => state.selectedPokemon\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n  const { setSelectedType } = bindActionCreators(actionCreators, dispatch);\r\n\r\n  const pokeTypeClickHandler = (pokeType: string) => {\r\n    setSelectedType(pokeType);\r\n  };\r\n\r\n  return (\r\n    <div className='pokemonData'>\r\n      <div className='pokemonData__header'>\r\n        <p className='pokemonData__name'>{selectedPokemon.name}</p>\r\n        <p className='pokemonData__id'>{selectedPokemon.ntnlnum}</p>\r\n      </div>\r\n\r\n      <img\r\n        className='pokemonData__img'\r\n        src={selectedPokemon.img}\r\n        alt={selectedPokemon.img}\r\n      />\r\n      <div className='pokemonData__details'>\r\n        <p className='pokemonData__detailsHead'>Types</p>\r\n        <div className='pokemonData__types'>\r\n          {selectedPokemon.types.map((pokeType: string) => (\r\n            <button\r\n              key={pokeType}\r\n              className={`pokeTypeBtn ${pokeType}`}\r\n              onClick={() => pokeTypeClickHandler(pokeType)}\r\n            >\r\n              <Link to='/' className='pokemonData__link'>\r\n                {pokeType}\r\n              </Link>\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <p className='pokemonData__description'>\r\n          {selectedPokemon.Description}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonData;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport '../styles/PokemonMoreInfo.css';\r\nimport PokemonData from './PokemonData';\r\n\r\nconst PokemonMoreInfo = () => {\r\n  return (\r\n    <div className='pokemonMoreInfo'>\r\n      <Link to='/' className='pokemonMoreInfo__link'>\r\n        ⟵ Go Back\r\n      </Link>\r\n      <PokemonData />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonMoreInfo;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators, State } from '../state';\r\n\r\nimport '../styles/PokemonFilter.css';\r\n\r\nconst PokemonFilter = () => {\r\n  const dispatch = useDispatch();\r\n  const { setSearchWord, setSelectedType } = bindActionCreators(\r\n    actionCreators,\r\n    dispatch\r\n  );\r\n\r\n  const selectedType = useSelector((state: State) => state.selectedType);\r\n\r\n  const pokemonTypes = useSelector((state: State) => state.pokemonTypes);\r\n  const searchWord = useSelector((state: State) => state.searchWord);\r\n\r\n  const buttonTypeClickHandler = (pokeType: string) => {\r\n    setSelectedType(pokeType);\r\n  };\r\n\r\n  const selectChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedType(e.target.value);\r\n  };\r\n\r\n  const inputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchWord(e.target.value);\r\n  };\r\n  return (\r\n    <div className='pokemonFilter'>\r\n      <input\r\n        placeholder='Search'\r\n        type='text'\r\n        onChange={inputChangeHandler}\r\n        value={searchWord}\r\n        className='pokemonFilter__search'\r\n      />\r\n      <select\r\n        className='pokemonFilter__select'\r\n        value={selectedType}\r\n        onChange={selectChangeHandler}\r\n      >\r\n        {[...pokemonTypes, 'All'].map((pokemonType) => (\r\n          <option key={pokemonType} value={pokemonType}>\r\n            {pokemonType}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <div className='pokemonFilter__buttons'>\r\n        {pokemonTypes.map((pokemonType) => (\r\n          <button\r\n            onClick={() => buttonTypeClickHandler(pokemonType)}\r\n            className={`pokemonFilter__button pokeTypeBtn ${pokemonType}`}\r\n            key={pokemonType}\r\n          >\r\n            {pokemonType}\r\n          </button>\r\n        ))}\r\n        <button\r\n          onClick={() => buttonTypeClickHandler('All')}\r\n          className='pokemonFilter__button pokeTypeBtn All'\r\n        >\r\n          All\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonFilter;\r\n","import { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../state';\r\n\r\nimport '../styles/PokeCard.css';\r\n\r\ninterface IProps {\r\n  pokemon: {\r\n    name: string;\r\n    ntnlnum: string;\r\n    img: string;\r\n    types: string[];\r\n    Description: string;\r\n  };\r\n}\r\n\r\nconst PokeCard: React.FC<IProps> = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { setSelectedPokemon } = bindActionCreators(actionCreators, dispatch);\r\n\r\n  const moreInfoClickHandler = () => {\r\n    setSelectedPokemon(props.pokemon);\r\n  };\r\n\r\n  return (\r\n    <li className='pokeCard'>\r\n      <p className='pokeCard__name'>{props.pokemon.name}</p>\r\n      <Link\r\n        to={`/more-info`}\r\n        onClick={moreInfoClickHandler}\r\n        className='pokeCard__link'\r\n      >\r\n        <img\r\n          className='pokeCard__img'\r\n          src={props.pokemon.img}\r\n          alt={props.pokemon.name}\r\n        />\r\n      </Link>\r\n      <div className='pokeCard__types'>\r\n        {props.pokemon.types.map((pokeType) => (\r\n          <button key={pokeType} className={`pokeTypeBtn ${pokeType}`}>\r\n            {pokeType}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PokeCard;\r\n","import { useSelector } from 'react-redux';\r\nimport { State } from '../state';\r\n\r\nimport PokeCard from './PokeCard';\r\n\r\nimport '../styles/PokeList.css';\r\n\r\nconst PokeList: React.FC = () => {\r\n  const pokedex = useSelector((state: State) => state.pokedex);\r\n  const selectedType = useSelector((state: State) => state.selectedType);\r\n  const searchWord = useSelector((state: State) => state.searchWord);\r\n\r\n  return (\r\n    <ul className='pokeList'>\r\n      {[...pokedex]\r\n        .filter(\r\n          (pokemon) =>\r\n            selectedType === 'All' || pokemon.types.includes(selectedType)\r\n        )\r\n        .filter((pokemon) =>\r\n          pokemon.name.toLowerCase().includes(searchWord.toLocaleLowerCase())\r\n        )\r\n        .map((pokemon) => (\r\n          <PokeCard pokemon={pokemon} key={pokemon.ntnlnum} />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PokeList;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport './App.css';\r\nimport { actionCreators, State } from './state';\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PokemonMoreInfo from './components/PokemonMoreInfo';\r\nimport PokemonFilter from './components/PokemonFilter';\r\nimport PokeList from './components/PokeList';\r\n\r\nconst App = () => {\r\n  const pokedex = useSelector((state: State) => state.pokedex);\r\n  const selectedType = useSelector((state: State) => state.selectedType);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { setPokemonTypes } = bindActionCreators(actionCreators, dispatch);\r\n\r\n  useEffect(() => {\r\n    const distinct = (value: string, index: number, self: string[]) => {\r\n      return self.indexOf(value) === index;\r\n    };\r\n    let pokeTypes: string[] = [];\r\n    [...pokedex].map((pokemon) =>\r\n      pokemon.types.forEach((type) => pokeTypes.push(type))\r\n    );\r\n    pokeTypes = pokeTypes.filter(distinct);\r\n    pokeTypes.sort();\r\n\r\n    setPokemonTypes(pokeTypes);\r\n  });\r\n\r\n  return (\r\n    <div className={`app ${selectedType}`}>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n          <PokemonFilter />\r\n          <PokeList />\r\n        </Route>\r\n        <Route path='/more-info'>\r\n          <PokemonMoreInfo />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { persistor, store } from './state';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}